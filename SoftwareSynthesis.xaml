<Window x:Class="ModelsofComputationandSynthesis.SoftwareSynthesis"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ModelsofComputationandSynthesis"
        mc:Ignorable="d"
        Title="SoftwareSynthesis" Height="417.546" Width="706.91" MaxWidth="726" MaxHeight="449">
    <Window.Background>
        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
            <GradientStop Color="Black" Offset="0"/>
            <GradientStop Color="{DynamicResource {x:Static SystemColors.ActiveCaptionColorKey}}" Offset="1"/>
        </LinearGradientBrush>
    </Window.Background>
    <Grid>
        <RichTextBox HorizontalAlignment="Left" Height="379" Margin="14,3,0,0" VerticalAlignment="Top" Width="677" TextChanged="RichTextBox_TextChanged" FontSize="10">
            <FlowDocument>
                <Paragraph BorderBrush="Black" BorderThickness="0,0,0,1" FontWeight="Bold" FontFamily="Times New Roman" Margin="0,13.33,0,0" Padding="1.33" TextAlignment="Left">
                    <Span FontFamily="Cambria">
                        <Run Text="CHAPTER 5 SOFTWARE SYNTHESIS"/>
                    </Span>
                </Paragraph>
                <Paragraph FontFamily="Calibri" Margin="0" TextAlignment="Justify"/>
                <Paragraph FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Span>
                        <Run Text="The synthesis overview consists of the Model of Computation -&gt; System Synthesis -&gt; System Model -&gt; Hardware Synthesis -&gt; Interface Synthesis -&gt; Software Synthesis -&gt; Binary Code and HDL RTL. Embedded software drives and control customized hardware accelerators that are integrated into the platform.   The embedded system is part of a physical control process such as anti-lock brake system.    Embedded systems can be programmed in C, C++ and Java.   Java omits the complicated C++ constructs including templates, namespaces, multiple inheritance and operator overloading. It also removes visible complexities in memory management and pointer arithmetic from the user.  Java was implemented with an interpreter to make it's object code, the Java byte code portable.  The RTOS which is a real time operating system is a software layer above the bare processor that controls the concurrent execution of applications and hence provides services for communication and synchronization.  A real time operating system  RTOS provides the following services:  Task management and Inter Task Communication (IPC). Task management creates, terminates and controls tasks while IPC enables tasks to exchange information and synchronize with each other.   An RTOS's ability to manage its various responsibilities is dependent on supported scheduling algorithms.  A scheduling algorithm determines the order in which different flows of execution are given access to a resource. "/>
                    </Span>
                </Paragraph>
                <Paragraph FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run Text="Classification properties for scheduling algorithms are: Preemptive/ Non-preemptive  (with this algorithm a running task may be interrupted in its execution at any point based on the scheduling policy). Static/Dynamic (whether the task scheduling parameters can be updated during runtime).Offline/On-line (characterizes when scheduling decisions are made). Priority based scheduling (The task order is determined by task independence and importance). Earliest deadline first (EDF), Rate Monotonic (RM) –tasks are assigned, Round Robin (RR) –  assigns tasks to the CPU based on time slices and tasks take turns.  Code generation is the first step of software synthesis, it generates sequential code in the target language for each task and programmable component, it also translates the application module hierarchy into the target programming language.   The generic software stack consists of the RTOS based multi-tasking application which  consists of SW application -&gt; Drivers -&gt; RTOS abstraction layer -&gt; RTOS -&gt; interrupts -&gt; hardware application layer.   Interrupt based multi-tasking: It is an alternative option for dynamic scheduling.      Synchronization is required to signal that a communication partner on the same link is ready for a data transfer.  Polling synchronization:   The hardware unit exposes a memory location to the processor bus. "/>
                </Paragraph>
                <Paragraph FontFamily="Calibri" Margin="0" TextAlignment="Justify"/>
                <Paragraph FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Span>
                        <Run Text="Communication:    IPC takes between tasks and the same processor. External communication is the communication between software processor and an external hardware accelerator, external memory and a communication element.  This type of communication consists of data formatting, packetization, synchronization, interrupt synchronization, polling synchronization and media access control. "/>
                    </Span>
                </Paragraph>
                <Paragraph FontFamily="Calibri" Margin="0" TextAlignment="Justify"/>
                <Paragraph FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Span FontStyle="Italic">
                        <Run Text="Startup code"/>
                    </Span>
                    <Span>
                        <Run Text=" generally consists of both platform specific and application specific code. It initializes the underlying hardware, registers, interrupts handlers and prepares them for multi-tasking.   "/>
                    </Span>
                    <Span FontStyle="Italic">
                        <Run Text="Binary image generation"/>
                    </Span>
                    <Span>
                        <Run Text=": The final aspect of SW synthesis is the generation of a complete target binary. A cross compiler tool chain compiles the generated code, the cross compiler is specific to the target processor and binary format. "/>
                    </Span>
                    <Span FontStyle="Italic">
                        <Run Text="Execution: "/>
                    </Span>
                    <Span>
                        <Run Text=" After successful binary generation the target platform is implemented "/>
                    </Span>
                </Paragraph>
                <Paragraph FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Span>
                        <Run/>
                    </Span>
                </Paragraph>
            </FlowDocument>
        </RichTextBox>

    </Grid>
</Window>
