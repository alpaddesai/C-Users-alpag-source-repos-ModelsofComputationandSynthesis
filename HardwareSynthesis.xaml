<Window x:Class="ModelsofComputationandSynthesis.HardwareSynthesis"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ModelsofComputationandSynthesis"
        mc:Ignorable="d"
        Title="HardwareSynthesis" Height="457.182" Width="808.546" MaxWidth="808" MaxHeight="457">
    <Grid Margin="0,0,9,7">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="609*"/>
            <ColumnDefinition Width="139*"/>
        </Grid.ColumnDefinitions>
        <Grid.Background>
            <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                <GradientStop Color="Black" Offset="0"/>
                <GradientStop Color="{DynamicResource {x:Static SystemColors.ActiveCaptionColorKey}}" Offset="1"/>
            </LinearGradientBrush>
        </Grid.Background>
        <RichTextBox HorizontalAlignment="Left" Height="389" Margin="17,10,0,0" VerticalAlignment="Top" Width="741" TextChanged="RichTextBox_TextChanged" Grid.ColumnSpan="2">
            <FlowDocument>
                <Paragraph BorderBrush="Black" BorderThickness="0,0,0,1" FontWeight="Bold" FontSize="17.3333333333333" FontFamily="Times New Roman" Margin="0,13.33,0,0" Padding="1.33" TextAlignment="Left">
                    <Run FontSize="12" FontFamily="Cambria" Text="CHAPTER 4 SYSTEM SYNTHESIS"/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify"/>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run FontSize="10" Text="In hardware system design, physical synthesis automates the placement of transistors and the routing of interconnects from a gate level description. The gate level description has been created by logic synthesis from a register transfer level (RTL) model.   The three techniques to enable system synthesis are model generation, mapping generation and platform generation."/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run FontSize="10"/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run FontStyle="Italic" FontSize="10" Text="System design trends: "/>
                    <Run Text=" "/>
                    <Run FontSize="10" Text=" The platform architects define the platform definition which includes the type of processors and their communication architecture. The number of processors will depend on the required number of independent tasks or available parallelism in the application. The hardware engineers develop the HDL models and configure the processors and other IPs along with the board design.  The SW engineers develop the system software.  A virtual platform based design methodology begins with the idea that a model of the HW platform may be used for SW development rather than prototyping a board. This is called a virtual platform. The VP provides a programmable model of all SW processors and functional models of all custom HW components. Virtual platforms are implemented in C/C++.  With SystemC virtual platforms for multi-core architectures can be modeled.   "/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run FontSize="10"/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run FontStyle="Italic" FontSize="10" Text="TLM based design:"/>
                    <Run Text=" "/>
                    <Run FontSize="10" Text="   The input to the design process is the system specification model where the specification consists of an application model mapped to the SW/HW platform. "/>
                    <Run Text=" "/>
                    <Run FontStyle="Italic" FontSize="10" Text="TLM based performance estimation: "/>
                    <Run Text=" "/>
                    <Run FontSize="10" Text="Various metrics can be evaluated by simulating the TLM. These metrics help the designer evaluate design decisions such as platform component selection and application to platform mapping along with timing estimation and communication delays.   Synchronization in the bus channel may be modeled with a set of flags and events.  The sender process must wait until the receiver process is ready to receive and the receiver must not read the data until the sender has provided it.  Post synchronization, bus arbitration is modeled. The simplest model is the mutual exclusive object called the mutex. An arbitration request corresponds to a mutex lock operation and once the transaction is complete the process releases the bus with a mutex unlock operation. Data transfer modeling: After synchronization and arbitration the sender process is ready to write the data on the bus TLM semantics."/>
                </Paragraph>
                <Paragraph>
                    <Run FontWeight="Bold" FontFamily="Cambria" Text="CHAPTER 6 HARDWARE SYNTHESIS"/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run FontSize="10" Text="HW components are synthesized as standard or custom processors or as special HW units also called Intellectual property components (IPs).  HW component synthesis which is called High Level Synthesis (HLS) uses the tool model to estimate metrics and performs allocation, binding and scheduling tasks.  HLS is initiated with RTL Components such as storage components, functional units and buses. Estimation and optimization focuses on data-path connectivity, reducing the number of functional units in the data-path and focusing on storage components.   Various optimization strategies include reducing data path cost by reducing the number of registers, functional units and connections. Pipelining is also applied to functional units, data paths and controllers. Interface synthesis:  These tasks included RTL component allocation, variable, operation and connectivity binding, pipelining, scheduling and RTL generation. "/>
                </Paragraph>
                <Paragraph FontSize="14.6666666666667" FontFamily="Calibri" Margin="0" TextAlignment="Justify">
                    <Run FontSize="10"/>
                </Paragraph>
            </FlowDocument>
        </RichTextBox>

    </Grid>
</Window>
